In React, a Higher-Order Component (HOC) is a pattern that allows you to reuse component logic by wrapping components with a higher-order function. HOCs enable code reuse, enhance component composition, and provide a way to add additional functionality to components.

Here's how a Higher-Order Component works:

1. **Higher-Order Function**:
   - A higher-order function is a function that takes a component as an argument and returns a new enhanced component.
   - The higher-order function can add props, modify behavior, or provide additional functionality to the wrapped component.

2. **Component Wrapping**:
   - To use a higher-order component, you wrap the target component by passing it as an argument to the higher-order function.
   - The higher-order function returns a new component, which is an enhanced version of the original component.

3. **Props Proxy**:
   - The HOC can manipulate props, inject additional props, or modify the behavior of the wrapped component.
   - It can pass down props to the wrapped component or intercept and transform props before passing them along.

Here's a simplified example to illustrate the concept of a Higher-Order Component:

```jsx
// Higher-Order Component
function withLogger(WrappedComponent) {
  return function WithLogger(props) {
    console.log('Component Rendered:', WrappedComponent.name);
    return <WrappedComponent {...props} />;
  };
}

// Component
function MyComponent(props) {
  return <div>{props.message}</div>;
}

// Wrap the component with the Higher-Order Component
const EnhancedComponent = withLogger(MyComponent);

// Usage of the EnhancedComponent
function App() {
  return <EnhancedComponent message="Hello, World!" />;
}
```

In the example above, the `withLogger` function is the higher-order component. It takes a component (`WrappedComponent`) as an argument and returns a new component (`WithLogger`). The `WithLogger` component logs the name of the wrapped component and renders the wrapped component with its props.

By wrapping `MyComponent` with `withLogger`, the resulting `EnhancedComponent` logs the name of the wrapped component (`MyComponent`) before rendering it. This demonstrates how the higher-order component enhances the original component by adding additional functionality (in this case, logging).

Higher-Order Components are widely used in React for various purposes, such as handling authentication, adding data fetching capabilities, or implementing reusable behaviors. They provide a flexible and reusable way to extend component functionality and promote code reuse and separation of concerns.